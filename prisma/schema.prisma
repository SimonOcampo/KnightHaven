// tells Prisma we're using SQLite
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// tells Prisma to generate the client we import in code
generator client {
  provider = "prisma-client-js"
}

// this is your users table
model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  passwordHash   String
  displayName    String?
  isUcfVerified  Boolean  @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  posts         Post[]
  listings       Listing[]
  services       Service[]
  reviews        Review[]
}

// Posts for social feed
model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Marketplace listings
model Listing {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  category    String
  phoneNumber String?  // Optional phone number for UCF verified users
  imageUrl    String?  // Optional image URL for listings
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Services offered
model Service {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  category    String
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//Yelp Places
model Place {
  id               String   @id @default(cuid())
  yelpId           String   @unique
  name             String
  description      String?
  originalCategory String?  // The category this was fetched under (e.g., "restaurants")
  rating           Float?
  reviewCount      Int?
  address          String?
  city             String?
  latitude         Float?
  longitude        Float?
  createdAt        DateTime @default(now())
  
  // Relations
  reviews          Review[]
}

// Student Reviews for Places
model Review {
  id              String   @id @default(cuid())
  placeId         String?
  place           Place?   @relation(fields: [placeId], references: [id], onDelete: SetNull)
  userId          Int?
  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  reviewerName    String   // Display name for the reviewer
  reviewerEmail   String   // Email of the reviewer
  isUCFVerified   Boolean  @default(false) // Whether reviewer is UCF verified
  rating          Int      // 1-5 star rating
  content         String   // Review text content
  isApproved      Boolean  @default(false) // Whether review is approved by moderators
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

